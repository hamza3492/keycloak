"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var KeycloakService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeycloakService = void 0;
const common_1 = require("@nestjs/common");
const keycloak_admin_client_1 = __importDefault(require("@keycloak/keycloak-admin-client"));
const openid_client_1 = require("openid-client");
const url_1 = require("url");
const resource_manager_1 = require("./lib/resource-manager");
const permission_manager_1 = require("./lib/permission-manager");
const keycloak_connect_1 = __importDefault(require("keycloak-connect"));
const request_manager_1 = require("./lib/request-manager");
let KeycloakService = KeycloakService_1 = class KeycloakService {
    constructor(options) {
        this.logger = new common_1.Logger(KeycloakService_1.name);
        if (!options.baseUrl.startsWith('http')) {
            throw new Error(`Invalid base url. It should start with either http or https.`);
        }
        this.options = options;
        this.baseUrl = (0, url_1.resolve)(options.baseUrl, `/auth/realms/${options.realmName}`);
        const keycloak = new keycloak_connect_1.default({}, {
            resource: this.options.clientId,
            realm: this.options.realmName,
            'auth-server-url': (0, url_1.resolve)(this.options.baseUrl, '/auth'),
            secret: this.options.clientSecret,
        });
        keycloak.accessDenied = (req, _res, next) => {
            req.accessDenied = true;
            next();
        };
        this.connect = keycloak;
        this.client = new keycloak_admin_client_1.default({
            baseUrl: this.options.baseUrl,
            realmName: this.options.realmName,
        });
        this.requestManager = new request_manager_1.RequestManager(this, this.baseUrl);
    }
    async initialize() {
        var _a, _b;
        if (this.umaConfiguration) {
            return;
        }
        const { clientId, clientSecret } = this.options;
        const { data } = await this.requestManager.get('/.well-known/uma2-configuration');
        this.umaConfiguration = data;
        this.resourceManager = new resource_manager_1.ResourceManager(this, data.resource_registration_endpoint);
        this.permissionManager = new permission_manager_1.PermissionManager(this, data.token_endpoint);
        const keycloakIssuer = await openid_client_1.Issuer.discover(data.issuer);
        this.issuerClient = new keycloakIssuer.Client({
            client_id: clientId,
            client_secret: clientSecret,
        });
        this.tokenSet = await this.issuerClient.grant({
            clientId,
            clientSecret,
            grant_type: 'client_credentials',
        });
        if ((_a = this.tokenSet) === null || _a === void 0 ? void 0 : _a.access_token)
            this.client.setAccessToken((_b = this.tokenSet) === null || _b === void 0 ? void 0 : _b.access_token);
        if (this.tokenSet.expires_at) {
            this.logger.verbose(`Initial token expires at ${this.tokenSet.expires_at}`);
        }
    }
    async refreshGrant() {
        var _a, _b, _c, _d;
        if (this.tokenSet && !this.tokenSet.expired()) {
            return this.tokenSet;
        }
        if (!this.tokenSet) {
            this.logger.warn(`Missing token set on refreshGrant.`);
            return null;
        }
        const { refresh_token } = this.tokenSet;
        if (!refresh_token) {
            this.logger.debug(`Refresh token is missing. Reauthenticating.`);
            this.tokenSet = await ((_a = this.issuerClient) === null || _a === void 0 ? void 0 : _a.grant({
                clientId: this.options.clientId,
                clientSecret: this.options.clientSecret,
                grant_type: 'client_credentials',
            }));
            if ((_b = this.tokenSet) === null || _b === void 0 ? void 0 : _b.access_token)
                this.client.setAccessToken((_c = this.tokenSet) === null || _c === void 0 ? void 0 : _c.access_token);
            return this.tokenSet;
        }
        this.logger.debug(`Refreshing grant token`);
        this.tokenSet = await ((_d = this.issuerClient) === null || _d === void 0 ? void 0 : _d.refresh(refresh_token));
        return this.tokenSet;
    }
};
KeycloakService = KeycloakService_1 = __decorate([
    (0, common_1.Global)(),
    __metadata("design:paramtypes", [Object])
], KeycloakService);
exports.KeycloakService = KeycloakService;
//# sourceMappingURL=service.js.map