"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestManager = void 0;
const axios_1 = __importDefault(require("axios"));
const common_1 = require("@nestjs/common");
class RequestManager {
    constructor(client, baseURL) {
        this.logger = new common_1.Logger(RequestManager.name);
        this.client = client;
        this.requester = axios_1.default.create({ baseURL });
        this.requester.interceptors.request.use(async (config) => {
            var _a;
            if (typeof ((_a = config.headers) === null || _a === void 0 ? void 0 : _a.authorization) === 'string') {
                if (config.headers.authorization.length > 0) {
                    return config;
                }
            }
            try {
                const tokenSet = await this.client.refreshGrant();
                if ((tokenSet === null || tokenSet === void 0 ? void 0 : tokenSet.access_token) && config.headers) {
                    config.headers.authorization = `Bearer ${tokenSet === null || tokenSet === void 0 ? void 0 : tokenSet.access_token}`;
                }
            }
            catch (error) {
                this.logger.warn(`Could not refresh grant on interceptor.`, error);
            }
            return config;
        });
    }
    async get(...args) {
        return this.requester.get.apply(null, args);
    }
    async post(...args) {
        return this.requester.post.apply(null, args);
    }
    async put(...args) {
        return this.requester.put.apply(null, args);
    }
    async delete(...args) {
        return this.requester.delete.apply(null, args);
    }
}
exports.RequestManager = RequestManager;
//# sourceMappingURL=request-manager.js.map