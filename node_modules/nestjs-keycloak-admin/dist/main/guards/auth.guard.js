"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var AuthGuard_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthGuard = void 0;
const common_1 = require("@nestjs/common");
const service_1 = require("../service");
const core_1 = require("@nestjs/core");
const public_decorator_1 = require("../decorators/public.decorator");
let AuthGuard = AuthGuard_1 = class AuthGuard {
    constructor(keycloak, reflector) {
        this.keycloak = keycloak;
        this.reflector = reflector;
        this.logger = new common_1.Logger(AuthGuard_1.name);
    }
    getRequest(context) {
        return context.switchToHttp().getRequest();
    }
    async canActivate(context) {
        const isPublic = this.reflector.get(public_decorator_1.META_PUBLIC, context.getHandler());
        if (isPublic) {
            return true;
        }
        const request = this.getRequest(context);
        const jwt = this.extractJwt(request.headers);
        try {
            const result = await this.keycloak.connect.grantManager.validateAccessToken(jwt);
            if (typeof result === 'string') {
                request.user = await this.keycloak.connect.grantManager.userInfo(jwt);
                request.accessToken = jwt;
                return true;
            }
        }
        catch (error) {
            this.logger.warn(`Error occurred validating token`, error);
        }
        throw new common_1.UnauthorizedException();
    }
    extractJwt({ authorization }) {
        if (!authorization) {
            throw new common_1.UnauthorizedException();
        }
        const [type, payload] = authorization.split(' ');
        if (type.toLowerCase() !== 'bearer') {
            throw new common_1.UnauthorizedException();
        }
        return payload;
    }
};
AuthGuard = AuthGuard_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, common_1.Inject)(service_1.KeycloakService)),
    __metadata("design:paramtypes", [service_1.KeycloakService,
        core_1.Reflector])
], AuthGuard);
exports.AuthGuard = AuthGuard;
//# sourceMappingURL=auth.guard.js.map