"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var ResourceGuard_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResourceGuard = void 0;
const common_1 = require("@nestjs/common");
const service_1 = require("../service");
const core_1 = require("@nestjs/core");
const resource_enforcer_decorator_1 = require("../decorators/resource.enforcer.decorator");
const scope_decorator_1 = require("../decorators/scope.decorator");
const uma_ticket_1 = require("../@types/uma.ticket");
const resource_decorator_1 = require("../decorators/resource.decorator");
const fetch_resources_decorator_1 = require("../decorators/fetch.resources.decorator");
const public_decorator_1 = require("../decorators/public.decorator");
let ResourceGuard = ResourceGuard_1 = class ResourceGuard {
    constructor(keycloak, reflector) {
        this.keycloak = keycloak;
        this.reflector = reflector;
        this.logger = new common_1.Logger(ResourceGuard_1.name);
    }
    getRequest(context) {
        return context.switchToHttp().getRequest();
    }
    async canActivate(context) {
        const isPublic = this.reflector.get(public_decorator_1.META_PUBLIC, context.getHandler());
        // Emit process, if endpoint is public.
        if (isPublic) {
            return true;
        }
        const request = this.getRequest(context);
        const resourceType = this.reflector.get(resource_decorator_1.META_RESOURCE, context.getClass());
        // If no @DefineScope() decorator is used in handler, it's generated from http method.
        const scope = this.reflector.get(scope_decorator_1.META_SCOPE, context.getHandler()) ||
            this.getScopeFromRequestMethod(request);
        const resourceHandler = this.reflector.get(resource_enforcer_decorator_1.META_RESOURCE_ENFORCER, context.getHandler());
        const shouldFetchResources = this.reflector.get(fetch_resources_decorator_1.META_FETCH_RESOURCES, context.getHandler());
        // If no resource type is defined as class decorator, emit.
        if (!resourceType) {
            return true;
        }
        // If no access token is defined, probably auth guard failed to load.
        if (!request.accessToken) {
            throw new common_1.UnauthorizedException();
        }
        // If handler has a @FetchResources() decorator, fetch resources for that resource type.
        if (shouldFetchResources) {
            return this.fetchResources(request);
        }
        let resourceId;
        try {
            if (resourceHandler) {
                const urlParam = resourceHandler.def(request);
                if (resourceHandler.param) {
                    const resource = await this.keycloak.resourceManager.findByAttribute(resourceHandler.param, urlParam);
                    if (resource) {
                        resourceId = resource[0];
                    }
                }
                else {
                    resourceId = urlParam;
                }
            }
            const response = await this.keycloak.permissionManager.requestTicket({
                token: request.accessToken,
                audience: this.keycloak.options.clientId,
                resourceId,
                scope: scope ? `${resourceType}:${scope}` : undefined,
                response_mode: resourceHandler
                    ? uma_ticket_1.TicketResponseMode.permissions
                    : uma_ticket_1.TicketResponseMode.decision,
            });
            if (!resourceHandler) {
                if (response.result)
                    return true;
                throw new common_1.UnauthorizedException();
            }
            const [{ scopes, rsid }] = response;
            request.scopes = scopes;
            request.resource = await this.keycloak.resourceManager.findById(rsid);
            return true;
        }
        catch (error) {
            this.logger.error(`Uncaught exception from UMA server`, error);
        }
        throw new common_1.UnauthorizedException();
    }
    getScopeFromRequestMethod(request) {
        switch (request.method) {
            case 'post':
                return 'create';
            case 'get':
                return 'read';
            case 'put':
                return 'update';
            case 'delete':
                return 'delete';
            default:
                return 'read';
        }
    }
    async fetchResources(request) {
        try {
            const response = (await this.keycloak.permissionManager.requestTicket({
                token: request.accessToken,
                audience: this.keycloak.options.clientId,
                response_mode: uma_ticket_1.TicketResponseMode.permissions,
            }));
            request.resources = await Promise.all(response.map((r) => this.keycloak.resourceManager.findById(r.rsid)));
            return true;
        }
        catch (error) {
            this.logger.error(`Uncaught exception when fetching resources from UMA server`, error);
        }
        throw new common_1.UnauthorizedException();
    }
};
ResourceGuard = ResourceGuard_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, common_1.Inject)(service_1.KeycloakService)),
    __metadata("design:paramtypes", [service_1.KeycloakService,
        core_1.Reflector])
], ResourceGuard);
exports.ResourceGuard = ResourceGuard;
//# sourceMappingURL=resource.guard.js.map