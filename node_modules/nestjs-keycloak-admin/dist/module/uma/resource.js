import { Scope } from './scope';
export class Resource {
    id;
    displayName;
    name;
    uris;
    type;
    owner;
    ownerManagedAccess;
    attributes = {};
    scopes = [];
    resourceScopes = [];
    constructor(resource, scopes) {
        this.id = resource._id;
        this.displayName = resource.displayName;
        this.name = resource.name;
        this.uris = resource.uris || [];
        this.type = resource.type;
        this.owner = resource.owner?.id;
        this.ownerManagedAccess = resource.ownerManagedAccess || false;
        this.attributes = resource.attributes;
        if (resource.resource_scopes) {
            this.setResourceScopes(resource.resource_scopes.map((s) => new Scope(s)));
        }
        if (scopes) {
            this.setScopes(scopes.map((s) => new Scope(s)));
        }
    }
    setId(id) {
        this.id = id;
        return this;
    }
    setDisplayName(displayName) {
        this.displayName = displayName;
        return this;
    }
    setName(name) {
        this.name = name;
        return this;
    }
    setUris(uris) {
        this.uris = uris;
        return this;
    }
    setType(type) {
        this.type = type;
        return this;
    }
    setOwner(ownerId) {
        this.owner = ownerId;
        return this;
    }
    setOwnerManagedAccess(isOwnerManaged) {
        this.ownerManagedAccess = isOwnerManaged;
        return this;
    }
    setAttributes(attributes) {
        this.attributes = attributes;
        return this;
    }
    setScopes(scopes) {
        this.scopes = scopes;
        return this;
    }
    setResourceScopes(scopes) {
        this.resourceScopes = scopes;
        return this;
    }
    isEqual(rhs) {
        return (rhs.name === this.name &&
            rhs.id === this.id &&
            rhs.type === this.type &&
            rhs.owner === this.owner);
    }
    toJson() {
        return {
            _id: this.id,
            name: this.name,
            uris: this.uris,
            type: this.type,
            owner: this.owner ? { id: this.owner } : undefined,
            ownerManagedAccess: this.ownerManagedAccess,
            attributes: this.attributes || {},
            displayName: this.displayName,
            resource_scopes: this.resourceScopes.map((s) => s.toJson()),
            scopes: this.scopes.map((s) => s.toJson()),
        };
    }
}
//# sourceMappingURL=resource.js.map