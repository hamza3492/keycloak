var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var ResourceGuard_1;
import { Injectable, UnauthorizedException, Logger, Inject, } from '@nestjs/common';
import { KeycloakService } from '../service';
import { Reflector } from '@nestjs/core';
import { META_RESOURCE_ENFORCER, } from '../decorators/resource.enforcer.decorator';
import { META_SCOPE } from '../decorators/scope.decorator';
import { TicketResponseMode, } from '../@types/uma.ticket';
import { META_RESOURCE } from '../decorators/resource.decorator';
import { META_FETCH_RESOURCES } from '../decorators/fetch.resources.decorator';
import { META_PUBLIC } from '../decorators/public.decorator';
let ResourceGuard = ResourceGuard_1 = class ResourceGuard {
    keycloak;
    reflector;
    logger = new Logger(ResourceGuard_1.name);
    constructor(keycloak, reflector) {
        this.keycloak = keycloak;
        this.reflector = reflector;
    }
    getRequest(context) {
        return context.switchToHttp().getRequest();
    }
    async canActivate(context) {
        const isPublic = this.reflector.get(META_PUBLIC, context.getHandler());
        // Emit process, if endpoint is public.
        if (isPublic) {
            return true;
        }
        const request = this.getRequest(context);
        const resourceType = this.reflector.get(META_RESOURCE, context.getClass());
        // If no @DefineScope() decorator is used in handler, it's generated from http method.
        const scope = this.reflector.get(META_SCOPE, context.getHandler()) ||
            this.getScopeFromRequestMethod(request);
        const resourceHandler = this.reflector.get(META_RESOURCE_ENFORCER, context.getHandler());
        const shouldFetchResources = this.reflector.get(META_FETCH_RESOURCES, context.getHandler());
        // If no resource type is defined as class decorator, emit.
        if (!resourceType) {
            return true;
        }
        // If no access token is defined, probably auth guard failed to load.
        if (!request.accessToken) {
            throw new UnauthorizedException();
        }
        // If handler has a @FetchResources() decorator, fetch resources for that resource type.
        if (shouldFetchResources) {
            return this.fetchResources(request);
        }
        let resourceId;
        try {
            if (resourceHandler) {
                const urlParam = resourceHandler.def(request);
                if (resourceHandler.param) {
                    const resource = await this.keycloak.resourceManager.findByAttribute(resourceHandler.param, urlParam);
                    if (resource) {
                        resourceId = resource[0];
                    }
                }
                else {
                    resourceId = urlParam;
                }
            }
            const response = await this.keycloak.permissionManager.requestTicket({
                token: request.accessToken,
                audience: this.keycloak.options.clientId,
                resourceId,
                scope: scope ? `${resourceType}:${scope}` : undefined,
                response_mode: resourceHandler
                    ? TicketResponseMode.permissions
                    : TicketResponseMode.decision,
            });
            if (!resourceHandler) {
                if (response.result)
                    return true;
                throw new UnauthorizedException();
            }
            const [{ scopes, rsid }] = response;
            request.scopes = scopes;
            request.resource = await this.keycloak.resourceManager.findById(rsid);
            return true;
        }
        catch (error) {
            this.logger.error(`Uncaught exception from UMA server`, error);
        }
        throw new UnauthorizedException();
    }
    getScopeFromRequestMethod(request) {
        switch (request.method) {
            case 'post':
                return 'create';
            case 'get':
                return 'read';
            case 'put':
                return 'update';
            case 'delete':
                return 'delete';
            default:
                return 'read';
        }
    }
    async fetchResources(request) {
        try {
            const response = (await this.keycloak.permissionManager.requestTicket({
                token: request.accessToken,
                audience: this.keycloak.options.clientId,
                response_mode: TicketResponseMode.permissions,
            }));
            request.resources = await Promise.all(response.map((r) => this.keycloak.resourceManager.findById(r.rsid)));
            return true;
        }
        catch (error) {
            this.logger.error(`Uncaught exception when fetching resources from UMA server`, error);
        }
        throw new UnauthorizedException();
    }
};
ResourceGuard = ResourceGuard_1 = __decorate([
    Injectable(),
    __param(0, Inject(KeycloakService)),
    __metadata("design:paramtypes", [KeycloakService,
        Reflector])
], ResourceGuard);
export { ResourceGuard };
//# sourceMappingURL=resource.guard.js.map