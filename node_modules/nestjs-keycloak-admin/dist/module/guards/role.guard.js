var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var RoleGuard_1;
import { Injectable, UnauthorizedException, Logger, Inject, } from '@nestjs/common';
import { KeycloakService } from '../service';
import { Reflector } from '@nestjs/core';
import { META_PUBLIC } from '../decorators/public.decorator';
import { META_ROLES } from '../decorators/roles.decorator';
import { RoleMatchingMode } from '../constants';
let RoleGuard = RoleGuard_1 = class RoleGuard {
    keycloak;
    reflector;
    logger = new Logger(RoleGuard_1.name);
    constructor(keycloak, reflector) {
        this.keycloak = keycloak;
        this.reflector = reflector;
    }
    getRequest(context) {
        return context.switchToHttp().getRequest();
    }
    async canActivate(context) {
        const isPublic = this.reflector.get(META_PUBLIC, context.getHandler());
        // Emit process, if endpoint is public.
        if (isPublic) {
            return true;
        }
        const request = this.getRequest(context);
        const roleDefinition = this.reflector.get(META_ROLES, context.getHandler());
        // If no resource type is defined as class decorator, emit.
        if (!roleDefinition?.roles?.length) {
            return true;
        }
        // If no access token is defined, probably auth guard failed to load.
        if (!request.accessToken) {
            throw new UnauthorizedException();
        }
        try {
            const grant = await this.keycloak.connect.grantManager.createGrant({
                access_token: request.accessToken,
            });
            const granted = this.isAccessGranted(roleDefinition, grant.access_token);
            granted
                ? this.logger.verbose(`Access granted for role(s).`)
                : this.logger.verbose(`Access denied due to missing role(s).`);
            return granted;
        }
        catch (error) {
            this.logger.error(`Error occured validating roles`, error);
        }
        throw new UnauthorizedException();
    }
    isAccessGranted(roleDefinition, accessToken) {
        if (roleDefinition.mode == RoleMatchingMode.ANY) {
            return roleDefinition.roles.some((role) => accessToken?.hasRole(role));
        }
        return roleDefinition.roles.every((role) => accessToken?.hasRole(role));
    }
};
RoleGuard = RoleGuard_1 = __decorate([
    Injectable(),
    __param(0, Inject(KeycloakService)),
    __metadata("design:paramtypes", [KeycloakService,
        Reflector])
], RoleGuard);
export { RoleGuard };
//# sourceMappingURL=role.guard.js.map